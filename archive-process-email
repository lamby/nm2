#!/usr/bin/python

import sys
import re
import shutil
import os.path
from email.parser import HeaderParser
from email.utils import getaddresses

DESTDIR = "."
TESTING = True

class AddressError(Exception):
    pass

class LookupError(Exception):
    pass


if TESTING:
    def connect():
        import sqlite3
        return sqlite3.connect("db-used-for-development.sqlite")
    def Q(s):
        return s.replace("%s", "?")
else:
    def connect():
        import psycopg2
        return psycopg2.connect("dbname=test user=postgres")
    def Q(s):
        return s


class Dispatcher(object):
    def __init__(self, infd=sys.stdin):
        self.re_dest = re.compile("^archive-(.+)@nm.debian.org$")
        self.infd = infd
        self._db = None

        # Parse the header only, leave the body in the input pipe
        self.msg = HeaderParser().parse(self.infd)

        # History of lookup attempts
        self.lookup_attempts = []

    @property
    def db(self):
        if self._db is None:
            self._db = connect()
        return self._db

    def log_lookup(self, msg):
        self.lookup_attempts.append(msg)

    def get_dest_key(self):
        to = self.msg.get("Delivered-To", None)
        if to is None:
            self.log_lookup("Delivered-To not found in mail")
            return None

        if to == "archive@nm.debian.org":
            self.log_lookup("no dest key")
            return None

        mo = self.re_dest.match(to)
        if mo is None:
            self.log_lookup("invalid delivered-to: '%s'" % to)
            return None

        self.log_lookup("dest key: '%s'" % mo.group(1))
        return mo.group(1)

    def deliver_to_failsafe(self, reason=None, exc=None):
        if reason is None:
            reason = "exception %s: %s" % (exc.__class__.__name__, str(exc))
        self.msg["NM-Archive-Failsafe-Reason"] = reason
        self.msg["NM-Archive-Lookup-History"] = ": ".join(self.lookup_attempts)

        with open(os.path.join(DESTDIR, "failsafe.mbox"), "a") as out:
            print >>out, self.msg.as_string(True)
            shutil.copyfileobj(sys.stdin, self.infd)

    def deliver_to_archive_key(self, arc_key):
        self.msg["NM-Archive-Lookup-History"] = ": ".join(self.lookup_attempts)
        with open(os.path.join(DESTDIR, "%s.mbox" % arc_key), "a") as out:
            print >>out, self.msg.as_string(True)
            shutil.copyfileobj(sys.stdin, self.infd)

    def archive_key_from_dest_key(self, dest_key):
        cur = self.db.cursor()
        query = """
        SELECT pr.archive_key
          FROM person p
          JOIN process pr ON pr.person_id = p.id
        """
        if '=' in dest_key:
            # Lookup email
            email = dest_key.replace("=", "@")
            self.log_lookup("lookup by email '%s'" % email)
            cur.execute(Q(query + "WHERE p.email=%s"), (email,))
        else:
            # Lookup uid
            self.log_lookup("lookup by uid '%s'" % dest_key)
            cur.execute(Q(query + "WHERE p.uid=%s"), (dest_key,))

        # Get the person ID
        arc_key = None
        for i, in cur:
            arc_key = i

        if arc_key is None:
            raise LookupError("invalid destination key in Delivered-To address: '%s'" % dest_key)

        return arc_key

    def emails_to_person_ids(self, emails):
        if not emails: return []

        uids = []
        for email in emails:
            if email.endswith("@debian.org"):
                uids.append(email[:-11])

        where = [
            "email IN (%s)" % (", ".join(("%s",) * len(emails)))
        ]
        if uids:
            where.append("uid IN (%s)" % (", ".join(("%s",) * len(uids))))
        query = "SELECT id FROM person WHERE (%s)" % (" OR ".join(where))

        cur = self.db.cursor()
        cur.execute(Q(query), emails + uids)
        pids = []
        for pid, in cur:
            pids.append(pid)

        return pids

    def list_open_processes(self):
        """
        Return a list of (archive_key, AM preson ID, NM person ID) tuples
        for all active processes in the database
        """
        query = """
        SELECT pr.archive_key, a.person_id, pr.person_id
          FROM process pr
          JOIN am a ON pr.manager_id = a.id
         WHERE pr.is_active = 1
        """
        cur = self.db.cursor()
        cur.execute(Q(query))
        return list(cur)

    def fields_to_person_ids(self, *names):
        """
        Merge the contents of all the named fields in the emails, parse the
        emails they contain and convert them to person IDs, returning the
        result as a frozenset
        """
        emails = []
        for name in names:
            emails += self.msg.get_all(name, [])
        emails = [x[1] for x in getaddresses(emails)]
        return frozenset(self.emails_to_person_ids(emails))

    def archive_keys_from_headers(self):
        # Get all Person ID given emails in From and To and Cc addresses
        fpids = self.fields_to_person_ids("from")
        tpids = self.fields_to_person_ids("to", "resent-to", "cc", "resent-cc")
        if not fpids and not tpids:
            raise LookupError("No known people recognised in message headers")

        # Get a list of all open processes
        procs = self.list_open_processes()

        def archive_keys(procs):
            "Return a list of archive keys from a procs-like list"
            return [x[0] for x in procs]

        # List of processes where the email is from an applicant
        cand = [p for p in procs if p[2] in fpids]
        if cand:
            # If only one active process matches, we're done
            if len(cand) == 1: return archive_keys(cand)
            # Try to keep only those to the AM
            filtered = [p for p in cand if p[1] in tpids]
            return archive_keys(filtered if filtered else cand)

        # List of processes where the email is to an applicant
        cand = [p for p in procs if p[2] in tpids]
        if cand:
            # If only one active process matches, we're done
            if len(cand) == 1: return archive_keys(cand)
            # Try to keep only those from the AM
            filtered = [p for p in cand if p[1] in fpids]
            return archive_keys(filtered if filtered else cand)

        # List of processes where the email is from or to an AM, but neither
        # from nor to applicants: send to all processes for the AM
        cand = [p for p in procs if p[1] in fpids or p[1] in tpids]
        if cand: return archive_keys(cand)

        # If nothing matched so far, fail
        raise LookupError("No active processes found matching the email headers")

    def get_arc_keys(self):
        dest_key = self.get_dest_key()
        if dest_key is not None:
            return [self.archive_key_from_dest_key(dest_key)]

        return self.archive_keys_from_headers()


def main():
    dispatcher = Dispatcher(sys.stdin)
    try:
        for arc_key in dispatcher.get_arc_keys():
            dispatcher.deliver_to_archive_key(arc_key)
        return 0
    except Exception, e:
        dispatcher.deliver_to_failsafe(exc=e)
        return 1

if __name__ == "__main__":
    sys.exit(main())

